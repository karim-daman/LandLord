name: 'Update Gist'

on:
  workflow_dispatch:

jobs:
  update-gist:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Get version
        id: get-version
        shell: bash
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Using version: ${VERSION}"

      - name: List release assets and generate updater JSON
        shell: bash
        run: |
          PACKAGE_VERSION="${{ steps.get-version.outputs.version }}"
          REPO="${{ github.repository }}"

          echo "Processing version: ${PACKAGE_VERSION}"
          echo "Repository: ${REPO}"

          # Create temporary directory for downloads
          mkdir -p temp_sigs

          # Function to safely download and read signature
          download_signature() {
            local asset_name="$1"
            local platform="$2"
            
            echo "Attempting to download asset: ${asset_name}"
            
            if gh release download "app-v${PACKAGE_VERSION}" --repo "${REPO}" --pattern "${asset_name}" --dir temp_sigs 2>/dev/null; then
              # Find the downloaded file inside the temp_sigs directory
              downloaded_file=$(find temp_sigs -type f -name "${asset_name}" -print -quit)
              if [ -n "$downloaded_file" ]; then
                echo "✓ Downloaded signature for $platform"
                # Read the content of the downloaded file
                cat "$downloaded_file"
                return 0
              fi
            fi
            
            echo "⚠ Could not find signature file: ${asset_name}"
            echo ""
            return 1
          }

          # Try to download signature files - these may have different naming patterns
          echo "Attempting to download signature files..."

          DARWIN_AARCH64_SIG=$(download_signature "*aarch64*.sig" "darwin-aarch64" || download_signature "*aarch64*.dmg.tar.gz.sig" "darwin-aarch64" || echo "")
          DARWIN_X86_64_SIG=$(download_signature "*x64*.sig" "darwin-x86_64" || download_signature "*x64*.dmg.tar.gz.sig" "darwin-x86_64" || echo "")
          LINUX_X86_64_SIG=$(download_signature "*amd64*.sig" "linux-x86_64" || download_signature "*amd64*.deb.sig" "linux-x86_64" || echo "")
          WINDOWS_X86_64_SIG=$(download_signature "*x64*.msi.zip.sig" "windows-x86_64" || echo "")

          # Create the updater JSON content
          cat > latest-landlord.json << EOF
          {
            "version": "${PACKAGE_VERSION}",
            "notes": "See the assets to download this version and install.",
            "pub_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "platforms": {
              "darwin-aarch64": {
                "signature": "${DARWIN_AARCH64_SIG}",
                "url": "https://github.com/${REPO}/releases/download/app-v${PACKAGE_VERSION}/App_${PACKAGE_VERSION}_aarch64.dmg.tar.gz"
              },
              "darwin-x86_64": {
                "signature": "${DARWIN_X86_64_SIG}",
                "url": "https://github.com/${REPO}/releases/download/app-v${PACKAGE_VERSION}/App_${PACKAGE_VERSION}_x64.dmg.tar.gz"
              },
              "linux-x86_64": {
                "signature": "${LINUX_X86_64_SIG}",
                "url": "https://github.com/${REPO}/releases/download/app-v${PACKAGE_VERSION}/app_${PACKAGE_VERSION}_amd64.deb"
              },
              "windows-x86_64": {
                "signature": "${WINDOWS_X86_64_SIG}",
                "url": "https://github.com/${REPO}/releases/download/app-v${PACKAGE_VERSION}/App_${PACKAGE_VERSION}_x64_en-US.msi.zip"
              }
            }
          }
          EOF

          echo "Generated latest-landlord.json content:"
          cat latest-landlord.json

          # Cleanup temporary files
          rm -rf temp_sigs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Gist with latest-landlord.json
        env:
          GITHUB_TOKEN: ${{ secrets.GIST_TOKEN }}
        run: |
          gh gist edit ${{ secrets.GIST_ID }} latest-landlord.json
