name: 'Build, Publish and Update Gist'

on:
  workflow_dispatch:

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
            target: 'aarch64-apple-darwin'
          - platform: 'macos-latest' # for Intel based macs.
            args: '--target x86_64-apple-darwin'
            target: 'x86_64-apple-darwin'
          - platform: 'ubuntu-22.04' # for Tauri v1 you could replace this with ubuntu-20.04.
            args: ''
            target: 'x86_64-unknown-linux-gnu'
          - platform: 'windows-latest'
            args: ''
            target: 'x86_64-pc-windows-msvc'

    runs-on: ${{ matrix.platform }}
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      release-id: ${{ steps.publish.outputs.releaseId }}
    steps:
      - uses: actions/checkout@v4

      - name: Get version
        id: get-version
        shell: bash
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Using version: ${VERSION}"

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
        # webkitgtk 4.0 is for Tauri v1 - webkitgtk 4.1 is for Tauri v2.
        # You can remove the one that doesn't apply to your app to speed up the workflow a bit.

      - name: install frontend dependencies
        run: npm install # change this to npm, pnpm or bun depending on which one you use.

      - name: Build and publish
        id: publish
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
        with:
          tagName: app-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: 'App v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: false
          prerelease: false
          args: ${{ matrix.args }}
          includeSource: false

  update-gist:
    needs: publish-tauri
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Verify jq installation
        shell: bash
        run: |
          which jq
          jq --version

      - name: Set version
        shell: bash
        run: |
          echo "PACKAGE_VERSION=${{ needs.publish-tauri.outputs.version }}" >> $GITHUB_ENV
          echo "Using version: ${{ needs.publish-tauri.outputs.version }}"

      # Wait for release assets to be fully available
      - name: Wait for release availability
        shell: bash
        run: |
          echo "Waiting for release assets to be available..."
          sleep 60

      # Download updater.json with robust error handling
      - name: Download updater.json
        shell: bash
        run: |
          echo "Attempting to download updater.json for version ${{ env.PACKAGE_VERSION }}..."
          MAX_RETRIES=6
          RETRY_COUNT=0

          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            echo "Download attempt $((RETRY_COUNT + 1)) of $MAX_RETRIES"
            
            # Try to download the file
            HTTP_CODE=$(curl -sS -L -o updater.json -w "%{http_code}" \
               "https://github.com/${{ github.repository }}/releases/download/app-v${{ env.PACKAGE_VERSION }}/latest.json")
            
            echo "HTTP response code: $HTTP_CODE"
            
            if [ "$HTTP_CODE" = "200" ]; then
              # Check if file exists and has content
              if [ -f "updater.json" ] && [ -s "updater.json" ]; then
                echo "File downloaded successfully"
                echo "File size: $(wc -c < updater.json) bytes"
                echo "First 200 characters:"
                head -c 200 updater.json
                echo ""
                
                # Validate JSON
                if jq empty updater.json >/dev/null 2>&1; then
                  echo "‚úì Downloaded file is valid JSON"
                  echo "JSON structure preview:"
                  jq '.' updater.json | head -20
                  break
                else
                  echo "‚úó Downloaded file is not valid JSON"
                  echo "Full file content:"
                  cat updater.json
                fi
              else
                echo "‚úó Downloaded file is empty or doesn't exist"
              fi
            else
              echo "‚úó Download failed with HTTP code: $HTTP_CODE"
              if [ -f "updater.json" ]; then
                echo "Response content:"
                cat updater.json
              fi
            fi
            
            RETRY_COUNT=$((RETRY_COUNT + 1))
            if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
              WAIT_TIME=$((RETRY_COUNT * 15))
              echo "Waiting ${WAIT_TIME} seconds before retry..."
              sleep $WAIT_TIME
            fi
          done

          if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
            echo "Failed to download valid updater.json after $MAX_RETRIES attempts"
            echo "Please check if the release app-v${{ env.PACKAGE_VERSION }} exists and has the latest.json asset"
            exit 1
          fi

      - name: Update Gist with latest-landlord.json
        shell: bash
        env:
          GIST_TOKEN: ${{ secrets.GIST_TOKEN }}
          GIST_ID: ${{ secrets.GIST_ID }}
        run: |
          echo "Starting Gist update process..."

          # Debug info
          echo "PACKAGE_VERSION: ${{ env.PACKAGE_VERSION }}"
          echo "Repository: ${{ github.repository }}"
          echo "GIST_ID exists: ${{ secrets.GIST_ID != '' }}"
          echo "GIST_TOKEN exists: ${{ secrets.GIST_TOKEN != '' }}"

          # Validate required secrets
          if [ -z "$GIST_ID" ]; then
            echo "‚ùå Error: GIST_ID is not set. Please add it to your repository secrets."
            exit 1
          fi

          if [ -z "$GIST_TOKEN" ]; then
            echo "‚ùå Error: GIST_TOKEN is not set. Please add it to your repository secrets."
            exit 1
          fi

          # Validate updater.json exists
          if [ ! -f "updater.json" ]; then
            echo "‚ùå Error: updater.json file not found"
            exit 1
          fi

          echo "üìÑ Content of downloaded updater.json:"
          cat updater.json | jq '.'
          echo ""

          # Extract signatures for all platforms
          echo "üîç Extracting signatures from updater.json..."

          # Check available platforms
          echo "Available platforms:"
          jq -r '.platforms | keys[]?' updater.json 2>/dev/null || echo "No platforms found"

          # Initialize variables for each platform
          LINUX_SIGNATURE=""
          WINDOWS_SIGNATURE=""
          DARWIN_X64_SIGNATURE=""
          DARWIN_ARM64_SIGNATURE=""

          # Platform mapping for common names
          declare -A PLATFORM_MAP=(
            ["linux-x86_64"]="LINUX"
            ["windows-x86_64"]="WINDOWS" 
            ["darwin-x86_64"]="DARWIN_X64"
            ["darwin-aarch64"]="DARWIN_ARM64"
          )

          # Extract signatures for each platform
          for platform in $(jq -r '.platforms | keys[]' updater.json 2>/dev/null); do
            signature=$(jq -r ".platforms.\"$platform\".signature" updater.json 2>/dev/null)
            echo "Platform: $platform, Signature: ${signature:0:20}..."
            
            case "$platform" in
              "linux-x86_64")
                LINUX_SIGNATURE="$signature"
                ;;
              "windows-x86_64")
                WINDOWS_SIGNATURE="$signature"
                ;;
              "darwin-x86_64")
                DARWIN_X64_SIGNATURE="$signature"
                ;;
              "darwin-aarch64")
                DARWIN_ARM64_SIGNATURE="$signature"
                ;;
            esac
          done

          # Use x86_64 Darwin signature for both if ARM64 not available (fallback)
          if [ -z "$DARWIN_ARM64_SIGNATURE" ] && [ -n "$DARWIN_X64_SIGNATURE" ]; then
            echo "‚ö†Ô∏è  Using x86_64 Darwin signature for ARM64 (universal binary)"
            DARWIN_ARM64_SIGNATURE="$DARWIN_X64_SIGNATURE"
          fi

          echo "‚úÖ Signatures extracted:"
          echo "  Linux: ${LINUX_SIGNATURE:+‚úì} ${LINUX_SIGNATURE:0:20}..."
          echo "  Windows: ${WINDOWS_SIGNATURE:+‚úì} ${WINDOWS_SIGNATURE:0:20}..."
          echo "  Darwin x64: ${DARWIN_X64_SIGNATURE:+‚úì} ${DARWIN_X64_SIGNATURE:0:20}..."
          echo "  Darwin ARM64: ${DARWIN_ARM64_SIGNATURE:+‚úì} ${DARWIN_ARM64_SIGNATURE:0:20}..."

          # Create latest-landlord.json content with all platforms
          echo "üìù Creating latest-landlord.json..."

          # Generate the JSON structure
          jq -n \
            --arg version "${{ env.PACKAGE_VERSION }}" \
            --arg notes "See the assets to download this version and install." \
            --arg pub_date "$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
            --arg linux_sig "$LINUX_SIGNATURE" \
            --arg linux_url "https://github.com/${{ github.repository }}/releases/download/app-v${{ env.PACKAGE_VERSION }}/LandLord_${{ env.PACKAGE_VERSION }}_amd64.AppImage" \
            --arg windows_sig "$WINDOWS_SIGNATURE" \
            --arg windows_url "https://github.com/${{ github.repository }}/releases/download/app-v${{ env.PACKAGE_VERSION }}/LandLord_${{ env.PACKAGE_VERSION }}_x64-setup.exe" \
            --arg darwin_x64_sig "$DARWIN_X64_SIGNATURE" \
            --arg darwin_x64_url "https://github.com/${{ github.repository }}/releases/download/app-v${{ env.PACKAGE_VERSION }}/LandLord_${{ env.PACKAGE_VERSION }}_x64.dmg" \
            --arg darwin_arm64_sig "$DARWIN_ARM64_SIGNATURE" \
            --arg darwin_arm64_url "https://github.com/${{ github.repository }}/releases/download/app-v${{ env.PACKAGE_VERSION }}/LandLord_${{ env.PACKAGE_VERSION }}_aarch64.dmg" \
            '{
              version: $version,
              notes: $notes,
              pub_date: $pub_date,
              platforms: {
                "linux-x86_64": {
                  signature: $linux_sig,
                  url: $linux_url
                },
                "windows-x86_64": {
                  signature: $windows_sig,
                  url: $windows_url
                },
                "darwin-x86_64": {
                  signature: $darwin_x64_sig,
                  url: $darwin_x64_url
                },
                "darwin-aarch64": {
                  signature: $darwin_arm64_sig,
                  url: $darwin_arm64_url
                }
              }
            }' > latest-landlord.json

          # Validate the created JSON
          echo "‚úÖ Validating latest-landlord.json..."
          if jq empty latest-landlord.json >/dev/null 2>&1; then
            echo "‚úÖ latest-landlord.json is valid JSON"
            echo "üìÑ Content preview:"
            jq '.' latest-landlord.json
          else
            echo "‚ùå latest-landlord.json is invalid JSON"
            echo "Content:"
            cat latest-landlord.json
            exit 1
          fi

          # Test Gist API access
          echo "üîê Testing Gist API access..."
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer ${GIST_TOKEN}" \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/gists/${GIST_ID}")

          echo "Gist API response code: $HTTP_CODE"

          if [ "$HTTP_CODE" != "200" ]; then
            echo "‚ùå Unable to access Gist (HTTP $HTTP_CODE)"
            echo "Please check your GIST_TOKEN permissions and GIST_ID validity"
            exit 1
          fi

          echo "‚úÖ Gist API access confirmed"

          # Create the JSON payload for the update
          echo "üì¶ Creating update payload..."
          UPDATE_PAYLOAD=$(jq -n --arg content "$(cat latest-landlord.json)" \
            '{files: {"latest-landlord.json": {content: $content}}}')

          echo "üöÄ Updating Gist..."
          UPDATE_RESPONSE=$(curl -s -w "\n%{http_code}" -X PATCH \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${GIST_TOKEN}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/gists/${GIST_ID}" \
            -d "${UPDATE_PAYLOAD}")

          HTTP_STATUS=$(echo "$UPDATE_RESPONSE" | tail -n1)
          RESPONSE_BODY=$(echo "$UPDATE_RESPONSE" | sed '$d')

          echo "HTTP Status: $HTTP_STATUS"

          if [ "$HTTP_STATUS" != "200" ]; then
            echo "‚ùå Failed to update Gist"
            echo "Response body:"
            echo "$RESPONSE_BODY" | jq '.' 2>/dev/null || echo "$RESPONSE_BODY"
            exit 1
          else
            echo "üéâ Gist updated successfully!"
            echo "üîó Updated Gist URL: https://gist.github.com/${GIST_ID}"
            echo "üìä Updated content summary:"
            echo "  - Version: ${{ env.PACKAGE_VERSION }}"
            echo "  - Platforms: linux-x86_64, windows-x86_64, darwin-x86_64, darwin-aarch64"
            echo "  - Linux AppImage: ${LINUX_SIGNATURE:+‚úì}"
            echo "  - Windows Setup: ${WINDOWS_SIGNATURE:+‚úì}"
            echo "  - macOS x64 DMG: ${DARWIN_X64_SIGNATURE:+‚úì}"
            echo "  - macOS ARM64 DMG: ${DARWIN_ARM64_SIGNATURE:+‚úì}"
          fi
