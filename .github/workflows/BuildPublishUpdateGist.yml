name: 'Build, Publish and Update Gist'

on:
  workflow_dispatch:

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
            target: 'aarch64-apple-darwin'
          - platform: 'macos-latest' # for Intel based macs.
            args: '--target x86_64-apple-darwin'
            target: 'x86_64-apple-darwin'
          - platform: 'ubuntu-22.04' # for Tauri v1 you could replace this with ubuntu-20.04.
            args: ''
            target: 'x86_64-unknown-linux-gnu'
          - platform: 'windows-latest'
            args: ''
            target: 'x86_64-pc-windows-msvc'

    runs-on: ${{ matrix.platform }}
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      release-id: ${{ steps.publish.outputs.releaseId }}
    steps:
      - uses: actions/checkout@v4

      - name: Get version
        id: get-version
        shell: bash
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Using version: ${VERSION}"

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
        # webkitgtk 4.0 is for Tauri v1 - webkitgtk 4.1 is for Tauri v2.
        # You can remove the one that doesn't apply to your app to speed up the workflow a bit.

      - name: install frontend dependencies
        run: npm install # change this to npm, pnpm or bun depending on which one you use.

      - name: Build and publish
        id: publish
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
        with:
          tagName: app-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: 'App v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: false
          prerelease: false
          args: ${{ matrix.args }}
          includeSource: false
          includeUpdaterJson: false

  update-gist:
    needs: publish-tauri
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Get version
        id: get-version
        shell: bash
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Using version: ${VERSION}"

      - name: Wait for release assets to be available
        shell: bash
        run: |
          echo "Waiting for release assets to be fully uploaded..."
          sleep 30

      - name: Download signature files and generate updater JSON
        shell: bash
        run: |
          PACKAGE_VERSION="${{ needs.publish-tauri.outputs.version }}"
          REPO="${{ github.repository }}"

          echo "Processing version: ${PACKAGE_VERSION}"
          echo "Repository: ${REPO}"

          # Create temporary directory for downloads
          mkdir -p temp_sigs

          # Download signature files (these are created by Tauri automatically when signing is enabled)
          echo "Downloading signature files..."

          # Function to safely download and read signature
          download_signature() {
            local url="$1"
            local output_file="$2"
            local platform="$3"
            
            if curl -L -f -s "$url" -o "$output_file"; then
              echo "✓ Downloaded signature for $platform"
              cat "$output_file"
            else
              echo "⚠ Failed to download signature for $platform from $url"
              echo ""
            fi
          }

          # Download signatures for each platform
          DARWIN_AARCH64_SIG=$(download_signature "https://github.com/${REPO}/releases/download/app-v${PACKAGE_VERSION}/App_${PACKAGE_VERSION}_aarch64.dmg.tar.gz.sig" "temp_sigs/darwin-aarch64.sig" "darwin-aarch64")
          DARWIN_X86_64_SIG=$(download_signature "https://github.com/${REPO}/releases/download/app-v${PACKAGE_VERSION}/App_${PACKAGE_VERSION}_x64.dmg.tar.gz.sig" "temp_sigs/darwin-x86_64.sig" "darwin-x86_64")
          LINUX_X86_64_SIG=$(download_signature "https://github.com/${REPO}/releases/download/app-v${PACKAGE_VERSION}/app_${PACKAGE_VERSION}_amd64.deb.sig" "temp_sigs/linux-x86_64.sig" "linux-x86_64")
          WINDOWS_X86_64_SIG=$(download_signature "https://github.com/${REPO}/releases/download/app-v${PACKAGE_VERSION}/App_${PACKAGE_VERSION}_x64_en-US.msi.zip.sig" "temp_sigs/windows-x86_64.sig" "windows-x86_64")

          # Create the updater JSON content with actual signatures
          cat > latest-landlord.json << EOF
          {
            "version": "v${PACKAGE_VERSION}",
            "notes": "See the assets to download this version and install.",
            "pub_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "platforms": {
              "darwin-aarch64": {
                "signature": "${DARWIN_AARCH64_SIG}",
                "url": "https://github.com/${REPO}/releases/download/app-v${PACKAGE_VERSION}/App_${PACKAGE_VERSION}_aarch64.dmg.tar.gz"
              },
              "darwin-x86_64": {
                "signature": "${DARWIN_X86_64_SIG}",
                "url": "https://github.com/${REPO}/releases/download/app-v${PACKAGE_VERSION}/App_${PACKAGE_VERSION}_x64.dmg.tar.gz"
              },
              "linux-x86_64": {
                "signature": "${LINUX_X86_64_SIG}",
                "url": "https://github.com/${REPO}/releases/download/app-v${PACKAGE_VERSION}/app_${PACKAGE_VERSION}_amd64.deb"
              },
              "windows-x86_64": {
                "signature": "${WINDOWS_X86_64_SIG}",
                "url": "https://github.com/${REPO}/releases/download/app-v${PACKAGE_VERSION}/App_${PACKAGE_VERSION}_x64_en-US.msi.zip"
              }
            }
          }
          EOF

          echo "Generated latest-landlord.json content:"
          cat latest-landlord.json

          # Cleanup temporary files
          rm -rf temp_sigs

      - name: Update Gist with latest-landlord.json
        env:
          GITHUB_TOKEN: ${{ secrets.GIST_TOKEN }}
        run: |
          # Update the gist using GitHub CLI
          gh gist edit ${{ secrets.GIST_ID }} latest-landlord.json
