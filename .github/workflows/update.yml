name: 'Update Gist'

on:
  # Allow manual triggering with version input
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to update gist for (e.g., 1.0.0)'
        required: true
        type: string

jobs:
  update-gist:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Verify jq installation
        run: |
          which jq
          jq --version

      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "PACKAGE_VERSION=${{ inputs.version }}" >> $GITHUB_ENV
            echo "Using manually provided version: ${{ inputs.version }}"
          elif [ "${{ github.event_name }}" = "release" ]; then
            # Extract version from release tag (remove 'v' prefix if present)
            VERSION="${{ github.event.release.tag_name }}"
            VERSION="${VERSION#v}"
            echo "PACKAGE_VERSION=${VERSION}" >> $GITHUB_ENV
            echo "Using release version: ${VERSION}"
          else
            # Fallback to package.json version
            VERSION=$(node -p "require('./package.json').version")
            echo "PACKAGE_VERSION=${VERSION}" >> $GITHUB_ENV
            echo "Using package.json version: ${VERSION}"
          fi

      # Wait for release assets to be fully available
      - name: Wait for release availability
        run: |
          echo "Waiting for release assets to be available..."
          sleep 30

      # Download updater.json with robust error handling
      - name: Download updater.json
        run: |
          echo "Attempting to download updater.json for version ${{ env.PACKAGE_VERSION }}..."
          MAX_RETRIES=6
          RETRY_COUNT=0

          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            echo "Download attempt $((RETRY_COUNT + 1)) of $MAX_RETRIES"
            
            # Try to download the file
            HTTP_CODE=$(curl -sS -L -o updater.json -w "%{http_code}" \
               "https://github.com/${{ github.repository }}/releases/download/v${{ env.PACKAGE_VERSION }}/latest.json")
            
            echo "HTTP response code: $HTTP_CODE"
            
            if [ "$HTTP_CODE" = "200" ]; then
              # Check if file exists and has content
              if [ -f "updater.json" ] && [ -s "updater.json" ]; then
                echo "File downloaded successfully"
                echo "File size: $(wc -c < updater.json) bytes"
                echo "First 200 characters:"
                head -c 200 updater.json
                echo ""
                
                # Validate JSON
                if jq empty updater.json >/dev/null 2>&1; then
                  echo "✓ Downloaded file is valid JSON"
                  echo "JSON structure preview:"
                  jq '.' updater.json | head -20
                  break
                else
                  echo "✗ Downloaded file is not valid JSON"
                  echo "Full file content:"
                  cat updater.json
                fi
              else
                echo "✗ Downloaded file is empty or doesn't exist"
              fi
            else
              echo "✗ Download failed with HTTP code: $HTTP_CODE"
              if [ -f "updater.json" ]; then
                echo "Response content:"
                cat updater.json
              fi
            fi
            
            RETRY_COUNT=$((RETRY_COUNT + 1))
            if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
              WAIT_TIME=$((RETRY_COUNT * 15))
              echo "Waiting ${WAIT_TIME} seconds before retry..."
              sleep $WAIT_TIME
            fi
          done

          if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
            echo "Failed to download valid updater.json after $MAX_RETRIES attempts"
            echo "Please check if the release v${{ env.PACKAGE_VERSION }} exists and has the latest.json asset"
            exit 1
          fi

      - name: Update Gist with latest-landlord.json
        env:
          GIST_TOKEN: ${{ secrets.GIST_TOKEN }}
          GIST_ID: ${{ secrets.GIST_ID }}
        run: |
          echo "Starting Gist update process..."

          # Debug info
          echo "PACKAGE_VERSION: ${{ env.PACKAGE_VERSION }}"
          echo "Repository: ${{ github.repository }}"
          echo "GIST_ID exists: ${{ secrets.GIST_ID != '' }}"
          echo "GIST_TOKEN exists: ${{ secrets.GIST_TOKEN != '' }}"

          # Validate required secrets
          if [ -z "$GIST_ID" ]; then
            echo "❌ Error: GIST_ID is not set. Please add it to your repository secrets."
            exit 1
          fi

          if [ -z "$GIST_TOKEN" ]; then
            echo "❌ Error: GIST_TOKEN is not set. Please add it to your repository secrets."
            exit 1
          fi

          # Validate updater.json exists
          if [ ! -f "updater.json" ]; then
            echo "❌ Error: updater.json file not found"
            exit 1
          fi

          echo "📄 Content of downloaded updater.json:"
          cat updater.json | jq '.'
          echo ""

          # Extract the signature with comprehensive error handling
          echo "🔍 Extracting signature from updater.json..."

          # Check available platforms
          echo "Available platforms:"
          jq -r '.platforms | keys[]?' updater.json 2>/dev/null || echo "No platforms found"

          # Try different possible platform names
          SIGNATURE=""
          PLATFORM_NAMES=("windows-x86_64" "win64" "windows" "win32")

          for PLATFORM in "${PLATFORM_NAMES[@]}"; do
            echo "Trying platform: $PLATFORM"
            if jq -e ".platforms.\"$PLATFORM\"" updater.json >/dev/null 2>&1; then
              SIGNATURE=$(jq -r ".platforms.\"$PLATFORM\".signature" updater.json 2>/dev/null)
              if [ "$SIGNATURE" != "null" ] && [ -n "$SIGNATURE" ]; then
                echo "✅ Found signature in platform: $PLATFORM"
                FOUND_PLATFORM="$PLATFORM"
                break
              fi
            fi
          done

          if [ -z "$SIGNATURE" ] || [ "$SIGNATURE" == "null" ]; then
            echo "❌ Signature not found in any expected platform!"
            echo "Full updater.json structure:"
            jq '.' updater.json
            exit 1
          fi

          echo "✅ Signature extracted successfully from platform: $FOUND_PLATFORM"
          echo "Signature length: ${#SIGNATURE} characters"

          # Create latest-landlord.json content
          echo "📝 Creating latest-landlord.json..."
          cat > latest-landlord.json << EOF
          {
            "version": "${{ env.PACKAGE_VERSION }}",
            "notes": "See the assets to download this version and install.",
            "pub_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "platforms": {
              "windows-x86_64": {
                "signature": "$SIGNATURE",
                "url": "https://github.com/${{ github.repository }}/releases/download/v${{ env.PACKAGE_VERSION }}/LandLord_${{ env.PACKAGE_VERSION }}_x64-setup.exe"
              }
            }
          }
          EOF

          # Validate the created JSON
          echo "✅ Validating latest-landlord.json..."
          if jq empty latest-landlord.json >/dev/null 2>&1; then
            echo "✅ latest-landlord.json is valid JSON"
            echo "📄 Content preview:"
            jq '.' latest-landlord.json
          else
            echo "❌ latest-landlord.json is invalid JSON"
            echo "Content:"
            cat latest-landlord.json
            exit 1
          fi

          # Test Gist API access
          echo "🔐 Testing Gist API access..."
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer ${GIST_TOKEN}" \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/gists/${GIST_ID}")

          echo "Gist API response code: $HTTP_CODE"

          if [ "$HTTP_CODE" != "200" ]; then
            echo "❌ Unable to access Gist (HTTP $HTTP_CODE)"
            echo "Please check your GIST_TOKEN permissions and GIST_ID validity"
            exit 1
          fi

          echo "✅ Gist API access confirmed"

          # Create the JSON payload for the update
          echo "📦 Creating update payload..."
          UPDATE_PAYLOAD=$(jq -n --arg content "$(cat latest-landlord.json)" \
            '{files: {"latest-landlord.json": {content: $content}}}')

          echo "🚀 Updating Gist..."
          UPDATE_RESPONSE=$(curl -s -w "\n%{http_code}" -X PATCH \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${GIST_TOKEN}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/gists/${GIST_ID}" \
            -d "${UPDATE_PAYLOAD}")

          HTTP_STATUS=$(echo "$UPDATE_RESPONSE" | tail -n1)
          RESPONSE_BODY=$(echo "$UPDATE_RESPONSE" | sed '$d')

          echo "HTTP Status: $HTTP_STATUS"

          if [ "$HTTP_STATUS" != "200" ]; then
            echo "❌ Failed to update Gist"
            echo "Response body:"
            echo "$RESPONSE_BODY" | jq '.' 2>/dev/null || echo "$RESPONSE_BODY"
            exit 1
          else
            echo "🎉 Gist updated successfully!"
            echo "🔗 Updated Gist URL: https://gist.github.com/${GIST_ID}"
            echo "📊 Updated content summary:"
            echo "  - Version: ${{ env.PACKAGE_VERSION }}"
            echo "  - Platform: windows-x86_64"
            echo "  - Signature length: ${#SIGNATURE} chars"
            echo "  - Download URL: https://github.com/${{ github.repository }}/releases/download/v${{ env.PACKAGE_VERSION }}/LandLord_${{ env.PACKAGE_VERSION }}_x64-setup.exe"
          fi
