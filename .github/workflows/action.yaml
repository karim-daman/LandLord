name: 'publish'

on:
  push:
    branches:
      - release

jobs:
  publish-tauri:
    permissions:
      contents: write
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: install frontend dependencies
        run: npm install

      - name: Get version
        id: version
        run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV
        shell: bash

      - name: Build and release
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          tagName: v${{ env.PACKAGE_VERSION }}
          releaseName: 'App v${{ env.PACKAGE_VERSION }}'
          releaseBody: 'See the assets to download this version and install.'
          includeUpdaterJson: true
          updaterJsonPreferNsis: true
          updaterJsonKeepUniversal: true
          releaseDraft: true
          prerelease: false

      - name: Update Gist with Latest_Landlord.json
        env:
          GIST_TOKEN: ${{ secrets.GIST_TOKEN }}
          GIST_ID: ${{ secrets.GIST_ID }}
        run: |
          echo "Starting Gist update process..."

          # Debug: Check environment variables (masked for security)
          echo "PACKAGE_VERSION: ${{ env.PACKAGE_VERSION }}"
          echo "GIST_ID exists: ${{ secrets.GIST_ID != '' }}"
          echo "GIST_TOKEN exists: ${{ secrets.GIST_TOKEN != '' }}"

          # Define expected signature file path (relative to the GitHub runner)
          SIGNATURE_FILE="src-tauri/target/release/bundle/nsis/LandLord_${{ env.PACKAGE_VERSION }}_x64-setup.exe.sig"

          # Check if the signature file exists
          if [ -f "$SIGNATURE_FILE" ]; then
            SIGNATURE=$(cat "$SIGNATURE_FILE" | tr -d '\n') # Remove newlines
            echo "✓ Signature file found and read successfully."
          else
            echo "✗ Signature file not found!"
            exit 1
          fi

          # Create Latest_Landlord.json content
          cat > Latest_Landlord.json << EOF
          {
            "version": "${{ env.PACKAGE_VERSION }}",
            "notes": "See the assets to download this version and install.",
            "pub_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "platforms": {
              "windows-x86_64": {
                "signature": "$SIGNATURE",
                "url": "https://github.com/${{ github.repository }}/releases/download/v${{ env.PACKAGE_VERSION }}/LandLord_${{ env.PACKAGE_VERSION }}_x64-setup.exe"
              }
            }
          }
          EOF

          # Debug: Show the content of Latest_Landlord.json
          echo "Content of Latest_Landlord.json:"
          cat Latest_Landlord.json
          echo "JSON validation check:"
          if jq empty Latest_Landlord.json >/dev/null 2>&1; then
            echo "✓ JSON is valid"
          else
            echo "✗ JSON is invalid"
            exit 1
          fi

          # Validate GIST_ID is set
          if [ -z "$GIST_ID" ]; then
            echo "Error: GIST_ID is not set. Please add it to your repository secrets."
            exit 1
          fi

          # Debug: Test Gist API access
          echo "Testing Gist API access..."
          GIST_TEST=$(curl -s -I -H "Authorization: Bearer ${GIST_TOKEN}" \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/gists/${GIST_ID}")

          echo "Gist API response code: $(echo "$GIST_TEST" | grep "^HTTP/" | awk '{print $2}')"

          # Create the JSON payload for the update
          echo "Creating update payload..."
          UPDATE_PAYLOAD=$(jq -n --arg content "$(cat Latest_Landlord.json)" \
            '{files: {"Latest_Landlord.json": {content: $content}}}')

          echo "Updating Gist..."
          UPDATE_RESPONSE=$(curl -s -w "\n%{http_code}" -X PATCH \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${GIST_TOKEN}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/gists/${GIST_ID}" \
            -d "${UPDATE_PAYLOAD}")

          HTTP_STATUS=$(echo "$UPDATE_RESPONSE" | tail -n1)
          RESPONSE_BODY=$(echo "$UPDATE_RESPONSE" | sed '$d')

          echo "HTTP Status: $HTTP_STATUS"
          if [ "$HTTP_STATUS" -ne 200 ]; then
            echo "Failed to update Gist. Response:"
            echo "$RESPONSE_BODY" | jq '.'
            echo "Error: Gist update failed with status $HTTP_STATUS"
            exit 1
          else
            echo "✓ Gist updated successfully"
            echo "Updated Gist URL: https://gist.github.com/${GIST_ID}"
          fi
        shell: bash
