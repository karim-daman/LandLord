name: 'Build and Publish'

on:
  workflow_dispatch:

jobs:
  build_and_publish:
    permissions:
      contents: write
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Install frontend dependencies
        run: npm install

      - name: Get package version
        id: package-version
        shell: pwsh
        run: |
          $packageJson = Get-Content "package.json" | ConvertFrom-Json
          $version = $packageJson.version
          echo "version=v$version" >> $env:GITHUB_OUTPUT
          echo "raw_version=$version" >> $env:GITHUB_OUTPUT
          echo "Package version: $version"

      - name: Debug version info
        run: |
          echo "Tag version: ${{ steps.package-version.outputs.version }}"
          echo "Raw version: ${{ steps.package-version.outputs.raw_version }}"

      - name: Verify Tauri setup
        run: |
          echo "=== Directory Structure ==="
          dir
          echo ""
          echo "=== Checking for src-tauri directory ==="
          if (Test-Path "src-tauri") { echo "✅ src-tauri directory exists" } else { echo "❌ src-tauri directory missing!" }
          echo ""
          echo "=== Checking tauri.conf.json ==="
          if (Test-Path "src-tauri/tauri.conf.json") { 
            echo "✅ tauri.conf.json exists"
            echo "Content:"
            Get-Content "src-tauri/tauri.conf.json"
          } else { 
            echo "❌ tauri.conf.json missing!" 
          }
          echo ""
          echo "=== Tauri Info ==="
          npm run tauri info
        shell: pwsh

      - name: Check if release already exists
        shell: pwsh
        run: |
          $tag = "${{ steps.package-version.outputs.version }}"
          $repo = "${{ github.repository }}"
          $headers = @{ Authorization = "Bearer ${{ secrets.GITHUB_TOKEN }}" }
          
          try {
            $response = Invoke-RestMethod -Uri "https://api.github.com/repos/$repo/releases/tags/$tag" -Headers $headers
            echo "⚠️ Release $tag already exists!"
            echo "Release URL: $($response.html_url)"
          } catch {
            echo "✅ Release $tag does not exist yet, proceeding..."
          }

      - name: Build and release
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
        with:
          tagName: ${{ steps.package-version.outputs.version }}
          releaseName: 'Release ${{ steps.package-version.outputs.version }}'
          releaseDraft: false
          prerelease: false
          releaseBody: 'See the assets to download this version and install.'
          includeUpdaterJson: true
          updaterJsonPreferNsis: true
          updaterJsonKeepUniversal: true

      - name: Check workflow results
        if: always()
        shell: pwsh
        run: |
          echo "=== Workflow completed ==="
          echo "Check the following:"
          echo "1. Look at the tauri-action step output above for errors"
          echo "2. Check your GitHub repository releases page"
          echo "3. Verify that the GITHUB_TOKEN has proper permissions"
          echo ""
          echo "Expected release URL: https://github.com/${{ github.repository }}/releases/tag/${{ steps.package-version.outputs.version }}"