# File: .github/workflows/update-gist.yml
name: 'update-gist'

on:
  workflow_dispatch: # Manual trigger only
    inputs:
      version:
        description: 'Version to update gist for (e.g., 1.2.3)'
        required: true
        type: string
  workflow_run: # Optionally trigger after publish workflow completes
    workflows: ['publish']
    types: [completed]

jobs:
  update-gist:
    runs-on: ubuntu-latest
    permissions:
      contents: none
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*

      # Verify jq installation
      - name: Verify jq installation
        run: |
          which jq
          jq --version
        shell: bash

      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "PACKAGE_VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          else
            echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV
          fi
        shell: bash

      # The tauri-action creates a file named latest.json. We need to download that file to get the signature.
      - name: Download updater.json
        run: |
          curl -sS -L -o updater.json https://github.com/${{ github.repository }}/releases/download/v${{ env.PACKAGE_VERSION }}/latest.json
        shell: bash

      - name: Update Gist with Latest_Landlord.json
        env:
          GIST_TOKEN: ${{ secrets.GIST_TOKEN }}
          GIST_ID: ${{ secrets.GIST_ID }}
        run: |
          echo "Starting Gist update process..."
          # Debug: Check environment variables (masked for security)
          echo "PACKAGE_VERSION: ${{ env.PACKAGE_VERSION }}"
          echo "GIST_ID exists: ${{ secrets.GIST_ID != '' }}"
          echo "GIST_TOKEN exists: ${{ secrets.GIST_TOKEN != '' }}"

          # Extract the signature from the downloaded updater.json
          SIGNATURE=$(jq -r '.platforms."windows-x86_64".signature' updater.json)
          if [ -z "$SIGNATURE" ] || [ "$SIGNATURE" == "null" ]; then
            echo "✗ Signature not found in updater.json!"
            exit 1
          fi

          # Create Latest_Landlord.json content
          cat > Latest_Landlord.json << EOF
          {
            "version": "${{ env.PACKAGE_VERSION }}",
            "notes": "See the assets to download this version and install.",
            "pub_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "platforms": {
              "windows-x86_64": {
                "signature": "$SIGNATURE",
                "url": "https://github.com/${{ github.repository }}/releases/download/v${{ env.PACKAGE_VERSION }}/LandLord_${{ env.PACKAGE_VERSION }}_x64-setup.exe"
              }
            }
          }
          EOF

          # Debug: Show the content of Latest_Landlord.json
          echo "Content of Latest_Landlord.json:"
          cat Latest_Landlord.json
          echo "JSON validation check:"
          if jq empty Latest_Landlord.json >/dev/null 2>&1; then
            echo "✓ JSON is valid"
          else
            echo "✗ JSON is invalid"
            exit 1
          fi

          # Validate GIST_ID is set
          if [ -z "$GIST_ID" ]; then
            echo "Error: GIST_ID is not set. Please add it to your repository secrets."
            exit 1
          fi

          # Debug: Test Gist API access
          echo "Testing Gist API access..."
          GIST_TEST=$(curl -s -I -H "Authorization: Bearer ${GIST_TOKEN}" \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/gists/${GIST_ID}")

          echo "Gist API response code: $(echo "$GIST_TEST" | grep "^HTTP/" | awk '{print $2}')"

          # Create the JSON payload for the update
          echo "Creating update payload..."
          UPDATE_PAYLOAD=$(jq -n --arg content "$(cat Latest_Landlord.json)" \
            '{files: {"Latest_Landlord.json": {content: $content}}}')

          echo "Updating Gist..."
          UPDATE_RESPONSE=$(curl -s -w "\n%{http_code}" -X PATCH \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${GIST_TOKEN}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/gists/${GIST_ID}" \
            -d "${UPDATE_PAYLOAD}")

          HTTP_STATUS=$(echo "$UPDATE_RESPONSE" | tail -n1)
          RESPONSE_BODY=$(echo "$UPDATE_RESPONSE" | sed '$d')

          echo "HTTP Status: $HTTP_STATUS"
          if [ "$HTTP_STATUS" -ne 200 ]; then
            echo "Failed to update Gist. Response:"
            echo "$RESPONSE_BODY" | jq '.'
            echo "Error: Gist update failed with status $HTTP_STATUS"
            exit 1
          else
            echo "✓ Gist updated successfully"
            echo "Updated Gist URL: https://gist.github.com/${GIST_ID}"
          fi
        shell: bash
